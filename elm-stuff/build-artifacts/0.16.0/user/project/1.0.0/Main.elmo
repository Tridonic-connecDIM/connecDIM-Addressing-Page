Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $Json$Encode = Elm.Json.Encode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Maybe$Extra = Elm.Maybe.Extra.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Signal$Extra = Elm.Signal.Extra.make(_elm),
   $String = Elm.String.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var taskMapReplace = F2(function (task,returnValue) {
      return A2($Task.map,
      function (_p0) {
         return returnValue;
      },
      task);
   });
   var results = $Signal.mailbox($Result.Err(""));
   var echoJson = function (value) {
      return $Json$Encode.object(_U.list([{ctor: "_Tuple2"
                                          ,_0: "method"
                                          ,_1: $Json$Encode.string("echo")}
                                         ,{ctor: "_Tuple2"
                                          ,_0: "params"
                                          ,_1: $Json$Encode.list(_U.list([value]))}]));
   };
   var myStyle = $Html$Attributes.style(_U.list([{ctor: "_Tuple2"
                                                 ,_0: "width"
                                                 ,_1: "100%"}
                                                ,{ctor: "_Tuple2",_0: "height",_1: "40px"}
                                                ,{ctor: "_Tuple2",_0: "padding",_1: "10px 0"}
                                                ,{ctor: "_Tuple2",_0: "font-size",_1: "2em"}
                                                ,{ctor: "_Tuple2",_0: "text-align",_1: "center"}]));
   var update = F2(function (action,model) {
      var _p1 = action;
      if (_p1.ctor === "Ok") {
            var _p2 = _p1._0;
            switch (_p2.ctor)
            {case "NoOp": return model;
               case "UnsetAddressingLine": return _U.update(model,
                 {addressingLine: $Maybe.Nothing
                 ,unaddressedState: $Maybe.Nothing
                 ,addressedDevices: _U.list([])
                 ,error: ""});
               case "SetAddressingLine": return _U.update(model,
                 {addressingLine: $Maybe.Just(_p2._0)});
               case "EraseError": return _U.update(model,{error: ""});
               case "DisplayError": return _U.update(model,{error: _p2._0});
               case "StartAddressing": return _U.update(model,
                 {addressing: true});
               case "StopAddressing": return _U.update(model,
                 {addressing: false});
               case "SetUnusedAddresses": return _U.update(model,
                 {unusedAddresses: _p2._0});
               case "AddDevice": return _U.update(model,
                 {addressedDevices: A2($Basics._op["++"],
                 model.addressedDevices,
                 _U.list([{address: _p2._0,types: _p2._1}]))});
               case "SetGatewayData": return _U.update(model,
                 {mac: _p2._0,name: _p2._1,lines: _p2._2,lineNames: _p2._3});
               default: return _U.eq(_p2._0,0) ? _U.update(model,
                 {unaddressedState: $Maybe.Just(false)
                 ,error: "There are no unaddressed devices"
                 ,addressing: false}) : _U.update(model,
                 {unaddressedState: $Maybe.Just(true)});}
         } else {
            return _U.update(model,{addressing: false,error: _p1._0});
         }
   });
   var readGatewayQuery = $Json$Encode.object(_U.list([{ctor: "_Tuple2"
                                                       ,_0: "method"
                                                       ,_1: $Json$Encode.string("readgateway")}
                                                      ,{ctor: "_Tuple2"
                                                       ,_0: "params"
                                                       ,_1: $Json$Encode.list(_U.list([]))}]));
   var query = $Signal.mailbox(readGatewayQuery);
   var findUnaddressedQuery = function (maybeLine) {
      var _p3 = maybeLine;
      if (_p3.ctor === "Just") {
            return $Json$Encode.object(_U.list([{ctor: "_Tuple2"
                                                ,_0: "method"
                                                ,_1: $Json$Encode.string("findunaddressed")}
                                               ,{ctor: "_Tuple2"
                                                ,_0: "params"
                                                ,_1: $Json$Encode.list(_U.list([$Json$Encode.$int(_p3._0)]))}]));
         } else {
            return $Json$Encode.$null;
         }
   };
   var setUnaddressedQuery = function (maybeLine) {
      var _p4 = maybeLine;
      if (_p4.ctor === "Just") {
            return $Json$Encode.object(_U.list([{ctor: "_Tuple2"
                                                ,_0: "method"
                                                ,_1: $Json$Encode.string("setunaddressed")}
                                               ,{ctor: "_Tuple2"
                                                ,_0: "params"
                                                ,_1: $Json$Encode.list(_U.list([$Json$Encode.$int(_p4._0)]))}]));
         } else {
            return $Json$Encode.$null;
         }
   };
   var sendJsonBasedOnModel = function (_p5) {
      var _p6 = _p5;
      var _p9 = _p6._0;
      var sendQuery = function (a) {
         return A2($Signal.send,query.address,a(_p9.addressingLine));
      };
      var _p7 = _p6._1;
      if (_p7.ctor === "Ok") {
            var _p8 = _p7._0;
            switch (_p8.ctor)
            {case "SetAddressingLine":
               return sendQuery(findUnaddressedQuery);
               case "AddDevice": return sendQuery(findUnaddressedQuery);
               case "StartAddressing": return sendQuery(setUnaddressedQuery);
               case "UnaddressedState": return !_U.eq(_p8._0,
                 0) && _U.eq(_p9.addressing,
                 true) ? sendQuery(setUnaddressedQuery) : $Task.succeed({ctor: "_Tuple0"});
               default: return $Task.succeed({ctor: "_Tuple0"});}
         } else {
            return $Task.succeed({ctor: "_Tuple0"});
         }
   };
   var title = Elm.Native.Port.make(_elm).outbound("title",
   function (v) {
      return v;
   },
   "Addressing Sorceress");
   var SetUnusedAddresses = function (a) {
      return {ctor: "SetUnusedAddresses",_0: a};
   };
   var UnaddressedState = function (a) {
      return {ctor: "UnaddressedState",_0: a};
   };
   var SetGatewayData = F4(function (a,b,c,d) {
      return {ctor: "SetGatewayData",_0: a,_1: b,_2: c,_3: d};
   });
   var AddDevice = F2(function (a,b) {
      return {ctor: "AddDevice",_0: a,_1: b};
   });
   var StopAddressing = {ctor: "StopAddressing"};
   var StartAddressing = {ctor: "StartAddressing"};
   var DisplayError = function (a) {
      return {ctor: "DisplayError",_0: a};
   };
   var gatewayResolve = $Json$Decode.oneOf(_U.list([A2($Json$Decode.object1,
                                                   DisplayError,
                                                   A2($Json$Decode.at,
                                                   _U.list(["error","message"]),
                                                   $Json$Decode.string))
                                                   ,A5($Json$Decode.object4,
                                                   SetGatewayData,
                                                   A2($Json$Decode.at,
                                                   _U.list(["result","mac"]),
                                                   $Json$Decode.string),
                                                   A2($Json$Decode.at,
                                                   _U.list(["result","hostname"]),
                                                   $Json$Decode.string),
                                                   A2($Json$Decode.at,
                                                   _U.list(["result","activelines"]),
                                                   $Json$Decode.list($Json$Decode.$int)),
                                                   A2($Json$Decode.at,
                                                   _U.list(["result","linenames"]),
                                                   $Json$Decode.list($Json$Decode.string)))
                                                   ,A3($Json$Decode.object2,
                                                   AddDevice,
                                                   A2($Json$Decode.at,
                                                   _U.list(["result","address"]),
                                                   $Json$Decode.$int),
                                                   A2($Json$Decode.at,
                                                   _U.list(["result","type"]),
                                                   $Json$Decode.list($Json$Decode.$int)))
                                                   ,A2($Json$Decode.object1,
                                                   UnaddressedState,
                                                   A2($Json$Decode.at,
                                                   _U.list(["result","unaddressed"]),
                                                   $Json$Decode.$int))
                                                   ,A2($Json$Decode.object1,
                                                   UnaddressedState,
                                                   A2($Json$Decode.at,
                                                   _U.list(["result","unaddressed"]),
                                                   $Json$Decode.$int))]));
   var lookupGatewayMethod = function (json) {
      var encoded_json = A2($Json$Encode.encode,0,json);
      var toUrl = _U.eq(encoded_json,
      "null") ? $Task.fail("Null JSON is invalid") : $Task.succeed(A2($Basics._op["++"],
      "/cgi-bin/json.cgi?json=",
      encoded_json));
      return A2($Task.andThen,
      toUrl,
      function (_p10) {
         return A2($Task.mapError,
         function (x) {
            return $Basics.toString(x);
         },
         A2($Http.get,gatewayResolve,_p10));
      });
   };
   var EraseError = {ctor: "EraseError"};
   var SetAddressingLine = function (a) {
      return {ctor: "SetAddressingLine",_0: a};
   };
   var UnsetAddressingLine = {ctor: "UnsetAddressingLine"};
   var view = F2(function (address,model) {
      var buttons = function () {
         if ($Maybe$Extra.isJust(model.addressingLine)) {
               var _p11 = model.unaddressedState;
               if (_p11.ctor === "Just") {
                     if (_p11._0 === true) {
                           return _U.eq(model.addressing,
                           false) ? _U.list([A2($Html.button,
                           _U.list([A2($Html$Events.onClick,
                           address,
                           $Result.Ok(StartAddressing))]),
                           _U.list([$Html.text("Start Addressing")]))]) : _U.list([A2($Html.button,
                           _U.list([A2($Html$Events.onClick,
                           address,
                           $Result.Ok(StopAddressing))]),
                           _U.list([$Html.text("Stop Addressing")]))]);
                        } else {
                           return _U.list([A2($Html.button,
                           _U.list([A2($Html$Events.onClick,
                           address,
                           $Result.Ok(UnsetAddressingLine))]),
                           _U.list([$Html.text("Return")]))]);
                        }
                  } else {
                     return _U.list([]);
                  }
            } else return A2($List.map,
            function (line) {
               return A2($Html.button,
               _U.list([A2($Html$Events.onClick,
               address,
               $Result.Ok(SetAddressingLine(line)))]),
               _U.list([$Html.text(A2($Basics._op["++"],
               "Address Line ",
               $Basics.toString(line)))]));
            },
            model.lines);
      }();
      var deviceImages = $List.map(function (deviceType) {
         var _p12 = deviceType;
         switch (_p12)
         {case 1: return "emergency";
            case 2: return "hid";
            case 3: return "downlight";
            case 4: return "incandescent";
            case 5: return "converter";
            case 6: return "led";
            case 7: return "relay";
            case 8: return "colour_control";
            case 254: return "msensor";
            default: return "fluoro";}
      });
      var devicesDiv = A2($List.map,
      function (device) {
         return A2($Html.div,
         _U.list([]),
         A2($Basics._op["++"],
         A2($List.map,
         function (imgName) {
            return A2($Html.img,
            _U.list([$Html$Attributes.src(A2($Basics._op["++"],
            "/img/type_",
            A2($Basics._op["++"],imgName,".png")))]),
            _U.list([]));
         },
         deviceImages(device.types)),
         _U.list([$Html.text(A2($Basics._op["++"],
         "Assigned address ",
         A2($Basics._op["++"],
         $Basics.toString(device.address),
         " to device")))])));
      },
      model.addressedDevices);
      return A2($Html.div,
      _U.list([myStyle]),
      A2($Basics._op["++"],
      _U.list([A2($Html.div,
              _U.list([]),
              _U.list([$Html.text(model.name)]))
              ,A2($Html.div,_U.list([]),_U.list([$Html.text(model.mac)]))
              ,A2($Html.div,
              _U.list([]),
              _U.list([$Html.text(function () {
                 var _p13 = model.addressingLine;
                 if (_p13.ctor === "Just") {
                       return A2($Basics._op["++"],
                       "Line ",
                       $Basics.toString(_p13._0));
                    } else {
                       return "";
                    }
              }())]))
              ,A2($Html.div,_U.list([]),_U.list([$Html.text(model.error)]))
              ,A2($Html.div,
              _U.list([]),
              _U.list([$Html.text(_U.eq($String.length(model.mac),
              0) ? "Loading…" : "")]))]),
      A2($Basics._op["++"],buttons,devicesDiv)));
   });
   var NoOp = {ctor: "NoOp"};
   var actions = $Signal.mailbox($Result.Ok(NoOp));
   var model = A3($Signal.foldp,
   update,
   {mac: ""
   ,name: ""
   ,addressingLine: $Maybe.Nothing
   ,lines: _U.list([])
   ,lineNames: _U.list([])
   ,addressedDevices: _U.list([])
   ,addressing: false
   ,unaddressedState: $Maybe.Nothing
   ,error: ""
   ,unusedAddresses: _U.list([])},
   actions.signal);
   var main = A2($Signal.map,view(actions.address),model);
   var requests = Elm.Native.Task.make(_elm).performSignal("requests",
   A2($Signal.map,
   function (task) {
      return A2($Task.andThen,
      A2($Task.andThen,
      A2(taskMapReplace,
      A2($Signal.send,actions.address,$Result.Ok(EraseError)),
      task),
      $Task.toResult),
      $Signal.send(actions.address));
   },
   A2($Signal.map,lookupGatewayMethod,query.signal)));
   var addressingAssistant = Elm.Native.Task.make(_elm).performSignal("addressingAssistant",
   A2($Signal.map,
   sendJsonBasedOnModel,
   $Signal.dropRepeats(A2($Signal$Extra.zip,
   model,
   actions.signal))));
   var Model = function (a) {
      return function (b) {
         return function (c) {
            return function (d) {
               return function (e) {
                  return function (f) {
                     return function (g) {
                        return function (h) {
                           return function (i) {
                              return function (j) {
                                 return {mac: a
                                        ,name: b
                                        ,addressingLine: c
                                        ,lines: d
                                        ,lineNames: e
                                        ,addressedDevices: f
                                        ,addressing: g
                                        ,unaddressedState: h
                                        ,error: i
                                        ,unusedAddresses: j};
                              };
                           };
                        };
                     };
                  };
               };
            };
         };
      };
   };
   var AddressedDevice = F2(function (a,b) {
      return {address: a,types: b};
   });
   return _elm.Main.values = {_op: _op
                             ,AddressedDevice: AddressedDevice
                             ,Model: Model
                             ,NoOp: NoOp
                             ,UnsetAddressingLine: UnsetAddressingLine
                             ,SetAddressingLine: SetAddressingLine
                             ,EraseError: EraseError
                             ,DisplayError: DisplayError
                             ,StartAddressing: StartAddressing
                             ,StopAddressing: StopAddressing
                             ,AddDevice: AddDevice
                             ,SetGatewayData: SetGatewayData
                             ,UnaddressedState: UnaddressedState
                             ,SetUnusedAddresses: SetUnusedAddresses
                             ,setUnaddressedQuery: setUnaddressedQuery
                             ,findUnaddressedQuery: findUnaddressedQuery
                             ,readGatewayQuery: readGatewayQuery
                             ,main: main
                             ,update: update
                             ,model: model
                             ,view: view
                             ,myStyle: myStyle
                             ,echoJson: echoJson
                             ,query: query
                             ,results: results
                             ,actions: actions
                             ,taskMapReplace: taskMapReplace
                             ,sendJsonBasedOnModel: sendJsonBasedOnModel
                             ,lookupGatewayMethod: lookupGatewayMethod
                             ,gatewayResolve: gatewayResolve};
};