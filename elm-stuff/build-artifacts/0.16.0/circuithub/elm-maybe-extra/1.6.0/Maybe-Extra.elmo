Elm.Maybe = Elm.Maybe || {};
Elm.Maybe.Extra = Elm.Maybe.Extra || {};
Elm.Maybe.Extra.make = function (_elm) {
   "use strict";
   _elm.Maybe = _elm.Maybe || {};
   _elm.Maybe.Extra = _elm.Maybe.Extra || {};
   if (_elm.Maybe.Extra.values) return _elm.Maybe.Extra.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var traverseArray = function (f) {
      var step = F2(function (e,acc) {
         var _p0 = f(e);
         if (_p0.ctor === "Nothing") {
               return $Maybe.Nothing;
            } else {
               return A2($Maybe.map,$Array.push(_p0._0),acc);
            }
      });
      return A2($Array.foldl,step,$Maybe.Just($Array.empty));
   };
   var combineArray = traverseArray($Basics.identity);
   var traverse = function (f) {
      var step = F2(function (e,acc) {
         var _p1 = f(e);
         if (_p1.ctor === "Nothing") {
               return $Maybe.Nothing;
            } else {
               return A2($Maybe.map,
               F2(function (x,y) {
                  return A2($List._op["::"],x,y);
               })(_p1._0),
               acc);
            }
      });
      return A2($List.foldr,step,$Maybe.Just(_U.list([])));
   };
   var combine = traverse($Basics.identity);
   var maybeToArray = function (m) {
      var _p2 = m;
      if (_p2.ctor === "Nothing") {
            return $Array.empty;
         } else {
            return A2($Array.repeat,1,_p2._0);
         }
   };
   var maybeToList = function (m) {
      var _p3 = m;
      if (_p3.ctor === "Nothing") {
            return _U.list([]);
         } else {
            return _U.list([_p3._0]);
         }
   };
   var or = F2(function (ma,mb) {
      var _p4 = ma;
      if (_p4.ctor === "Nothing") {
            return mb;
         } else {
            return ma;
         }
   });
   var andMap = F2(function (f,x) {
      return A2($Maybe.andThen,
      x,
      function (x$) {
         return A2($Maybe.andThen,
         f,
         function (f$) {
            return $Maybe.Just(f$(x$));
         });
      });
   });
   var map5 = F6(function (f,a,b,c,d,e) {
      return A2(andMap,
      A2(andMap,A2(andMap,A2(andMap,A2($Maybe.map,f,a),b),c),d),
      e);
   });
   var map4 = F5(function (f,a,b,c,d) {
      return A2(andMap,
      A2(andMap,A2(andMap,A2($Maybe.map,f,a),b),c),
      d);
   });
   var map3 = F4(function (f,a,b,c) {
      return A2(andMap,A2(andMap,A2($Maybe.map,f,a),b),c);
   });
   var map2 = F3(function (f,a,b) {
      return A2(andMap,A2($Maybe.map,f,a),b);
   });
   var next = map2($Basics.flip($Basics.always));
   var prev = map2($Basics.always);
   var mapDefault = F3(function (d,f,m) {
      return A2($Maybe.withDefault,d,A2($Maybe.map,f,m));
   });
   var isJust = function (m) {
      var _p5 = m;
      if (_p5.ctor === "Nothing") {
            return false;
         } else {
            return true;
         }
   };
   var isNothing = function (m) {
      var _p6 = m;
      if (_p6.ctor === "Nothing") {
            return true;
         } else {
            return false;
         }
   };
   var join = function (mx) {
      var _p7 = mx;
      if (_p7.ctor === "Just") {
            return _p7._0;
         } else {
            return $Maybe.Nothing;
         }
   };
   _op["?"] = F2(function (mx,x) {
      return A2($Maybe.withDefault,x,mx);
   });
   return _elm.Maybe.Extra.values = {_op: _op
                                    ,join: join
                                    ,isNothing: isNothing
                                    ,isJust: isJust
                                    ,map2: map2
                                    ,map3: map3
                                    ,map4: map4
                                    ,map5: map5
                                    ,mapDefault: mapDefault
                                    ,andMap: andMap
                                    ,next: next
                                    ,prev: prev
                                    ,or: or
                                    ,maybeToList: maybeToList
                                    ,maybeToArray: maybeToArray
                                    ,traverse: traverse
                                    ,combine: combine
                                    ,traverseArray: traverseArray
                                    ,combineArray: combineArray};
};